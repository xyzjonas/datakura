# Generated by Django 5.2.6 on 2025-10-29 20:22

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("warehouse", "0007_remove_warehouseitem_load_or_location_exclusive_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomerGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("changed", models.DateTimeField(auto_now=True)),
                ("code", models.CharField(max_length=100, unique=True)),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("changed", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=50)),
                ("code", models.CharField(max_length=50, unique=True)),
                ("street", models.CharField(blank=True, max_length=255)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                (
                    "state",
                    models.CharField(
                        choices=[("CZ", "Czech Republic"), ("SK", "Slovakia")],
                        default="CZ",
                        max_length=50,
                    ),
                ),
                ("tax_identification", models.CharField(blank=True, max_length=50)),
                ("identification", models.CharField(blank=True, max_length=50)),
                (
                    "price_type_code",
                    models.CharField(choices=[("FIRMY", "Companies")], max_length=50),
                ),
                ("invoice_due_days", models.IntegerField(default=30)),
                ("block_after_due_days", models.IntegerField(default=30)),
                ("data_collection_agreement", models.BooleanField(default=False)),
                ("marketing_data_use_agreement", models.BooleanField(default=False)),
                ("is_valid", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("owner_id", models.UUIDField()),
                ("note", models.TextField(blank=True, null=True)),
                ("register_information", models.TextField(blank=True, null=True)),
                (
                    "responsible_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="responsible_for",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="customers",
                        to="warehouse.customergroup",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("changed", models.DateTimeField(auto_now=True)),
                ("title_pre", models.CharField(blank=True, max_length=50, null=True)),
                ("first_name", models.CharField(max_length=100)),
                (
                    "middle_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("last_name", models.CharField(max_length=100)),
                ("title_post", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=50)),
                ("is_deleted", models.BooleanField(default=False)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to="warehouse.customer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Person",
                "verbose_name_plural": "People",
                "ordering": ["last_name", "first_name"],
            },
        ),
    ]
